#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct ht HT;

struct ht{
	char nome[100];
	char telefone[10];
	HT *prox;
};

static HT **tabela = NULL;
static int tamanho;

int hash(char chave[], int tamanho){
	int i, h = 0;
	for(i = 0; chave[i] != '\0'; i++)
		h = h + 83 * chave[i];
	h = h % tamanho;	
	return h;
}

void inicializaHT(int _tam){
	tamanho = _tam;
	tabela = malloc(tamanho * sizeof(HT *));
	for (int i = 0; i < tamanho; i++)
		tabela[i] = NULL;
}

void insereHT(char name[], char telefone[], int parametro){
	HT *ptr;
	int chave = hash(name, tamanho);
	ptr = tabela[chave];
	while(ptr != NULL && strcmp(ptr->nome, name))
		ptr = ptr->prox;
	if(ptr == NULL){
		if(parametro == 0){
			ptr = malloc(sizeof(*ptr));
			strcpy(ptr->nome,name);
			ptr->prox = tabela[chave];
			tabela[chave] = ptr;
			strcpy(ptr->telefone,telefone);
		}
		else
			printf("Operacao invalida: contatinho nao encontrado\n");
	}
	else{
		if(parametro == 0)
			printf("Contatinho ja inserido\n");
		else
			strcpy(ptr->telefone,telefone);

	}
}

void buscaHT(char name[]){
	int chave = hash(name,tamanho);
	HT *ptr;
	ptr = tabela[chave];
	while(ptr != NULL && strcmp(ptr->nome, name) != 0)
		ptr = ptr->prox;
	if(ptr == NULL)
		printf("Operacao invalida: Contatinho nao encontrado\n");
	else
		printf("Contatinho encontrado: telefone %s\n", ptr->telefone);
}

void removeHT(char name[]){
	HT *ptr, *aux;
	int key = hash(name, tamanho);
	ptr = tabela[key];
	if(ptr == NULL){
		printf("Operacao invalida: contatinho nao encontrado\n");
		return;
	}
	if(strcmp(ptr->nome, name) == 0){
		tabela[key] = ptr->prox;
		free(ptr->nome);
		free(ptr->telefone);
		free(ptr);
		return;
	}
	while(ptr->prox != NULL && strcmp((ptr->prox)->nome, name) != 0)
		ptr = ptr->prox;
	if(ptr->prox != NULL){
		aux = ptr->prox;
		ptr->prox = aux->prox;
		free(aux->nome);
		free(aux->telefone);
		free(aux); 
	}
}

void finalizaHT(){
	HT *p = NULL, *q = NULL;
	for (int i = 0; i < tamanho; i++){
		p = tabela[i];
		while (p != NULL){
			q = p;
			p = p->prox;
			free(q->telefone);
			free(q->nome);
			free(q);
		}
	}
	free(tabela);
	tabela = NULL;
}

char **divLinha(char *buffer, int *tam){
	char *aux; // Variavel auxiliar para armazenar palavras do buffer.
	int cont = 0;
	int i = 0;

	char *copiaBuffer = malloc(sizeof(char) * strlen(buffer+1));
	strcpy(copiaBuffer,buffer); // Copia o buffer para outra variavel para utilizar a funcao strtok

	/* Conta a quantidade de palavras dentro do buffer. */
	aux = strtok(buffer," ");
	while(aux != NULL){
		cont++;
		aux = strtok(NULL," ");
	}

	/* Instancia o vetor de strings com o tamanho referente a quantidade de palavras. */
	char **listaParametros = malloc(sizeof(char *) * (cont+1) );

	/* Encontra todas as palavras e coloca dentro do vetor de strings. */
	aux = strtok(copiaBuffer," ");
	listaParametros[i] = malloc((strlen(aux)+1) * sizeof(char)); //Problema ta aqui
	listaParametros[i] = aux;


	for(i = 1; i < cont; i ++){
		aux = strtok(NULL," ");
		listaParametros[i] = malloc( (strlen(aux)+3) * sizeof(char));
		strcpy(listaParametros[i], aux);

	}

	*tam = cont; // Retorna atravÃ©s da variavel tam o tamanho do vetor de string.
	return listaParametros; // Retorna o vetor de strings com todas as palavras do buffer.
}

int interpretador(){
	char **listaPalavras;
	char comando[1000];
	int tamanho = 0;

	fgets(comando,sizeof(comando), stdin);
	comando[strlen(comando)-1] = '\0';
	listaPalavras = divLinha(comando, &tamanho);

	if(!strcmp(listaPalavras[0], "I") && tamanho == 3)
		insereHT(listaPalavras[1], listaPalavras[2], 0);
	else if(!strcmp(listaPalavras[0], "P") && tamanho == 2)
		buscaHT(listaPalavras[1]);
	else if(!strcmp(listaPalavras[0],"R") && tamanho == 2)
		removeHT(listaPalavras[1]);
	else if(!strcmp(listaPalavras[0], "A") && tamanho == 3){
		insereHT(listaPalavras[1], listaPalavras[2], 1);
	}
	else if(!strcmp(listaPalavras[0], "S") && tamanho == 1){
		finalizaHT();
		return 0;
	}
	return 1;
}


int main(){
	int flag = 1;
	inicializaHT(100);
	while (flag == 1)
		flag = interpretador();
	return 0;
}
